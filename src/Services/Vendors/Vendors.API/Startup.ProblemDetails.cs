using System;
using LoadLogic.Services.Vendors.Domain;
using Hellang.Middleware.ProblemDetails;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using LoadLogic.Services.Exceptions;

namespace LoadLogic.Services.Vendors.API
{
    /// <summary>
    /// A problem details object can have the following members:
    /// 
    /// "type" (string) - A URI reference [RFC3986] that identifies the
    /// problem type.  This specification encourages that, when
    /// dereferenced, it provide human-readable documentation for the
    /// problem type (e.g., using HTML [W3C.REC-html5-20141028]).  When
    /// this member is not present, its value is assumed to be "about:blank".
    /// 
    /// "title" (string) - A short, human-readable summary of the problem
    /// type.  It SHOULD NOT change from occurrence to occurrence of the
    /// problem, except for purposes of localization (e.g., using
    /// proactive content negotiation; see [RFC7231], Section 3.4).
    /// 
    /// "status" (number) - The HTTP status code ([RFC7231], Section 6)
    /// generated by the origin server for this occurrence of the problem.
    /// 
    /// "detail" (string) - A human-readable explanation specific to this
    /// occurrence of the problem.
    /// 
    /// "instance" (string) - A URI reference that identifies the specific
    /// occurrence of the problem.  It may or may not yield further
    /// information if dereferenced.
    /// </summary>
    public static class ProblemDetailsServicesExtension
    {
        public static IServiceCollection AddCustomProblemDetailsServices(this IServiceCollection services, IWebHostEnvironment env)
        {
            services.AddProblemDetails(options =>
            {
                options.IncludeExceptionDetails = (ctx, ex) => env.IsDevelopment();

                options.Map<NotFoundException>(e => new ProblemDetails
                {
                    Title = "Not Found",
                    Detail = e.Message,
                    Status = StatusCodes.Status404NotFound,
                    Type = GetClientErrorType(StatusCodes.Status404NotFound)
                });

                options.Map<DuplicateCodeException>(e => new ProblemDetails
                {
                    Title = "Duplicate Code",
                    Detail = e.Message,
                    Status = StatusCodes.Status409Conflict,
                    Type = GetClientErrorType(StatusCodes.Status409Conflict)
                });

                options.Map<DuplicateProfileException>(e => new ProblemDetails
                {
                    Title = "Duplicate Profile",
                    Detail = e.Message,
                    Status = StatusCodes.Status409Conflict,
                    Type = GetClientErrorType(StatusCodes.Status409Conflict)
                });

                options.Map<InvalidRequestException>(e => new ProblemDetails
                {
                    Title = "Invalid Request",
                    Detail = e.Message,
                    Status = StatusCodes.Status400BadRequest,
                    Type = GetClientErrorType(StatusCodes.Status400BadRequest)
                });

                options.Map<InvalidContentLengthException>(e => new ProblemDetails
                {
                    Title = "Invalid Content Length",
                    Detail = e.Message,
                    Status = StatusCodes.Status413PayloadTooLarge,
                    Type = GetClientErrorType(StatusCodes.Status413PayloadTooLarge)
                });

                options.Map<InvalidImageFormatException>(e => new ProblemDetails
                {
                    Title = "Invalid Image",
                    Detail = e.Message,
                    Status = StatusCodes.Status415UnsupportedMediaType,
                    Type = GetClientErrorType(StatusCodes.Status415UnsupportedMediaType)
                });

                options.Map<EntityDeletionException>(e => new ProblemDetails
                {
                    Title = "Deletion Error",
                    Detail = e.Message,
                    Status = StatusCodes.Status409Conflict,
                    Type = GetClientErrorType(StatusCodes.Status409Conflict)
                });

                options.Map<InvalidOperationException>(e =>
                {
                    return new ProblemDetails
                    {
                        Title = "Internal Server Error",
                        Detail = e.Message,
                        Status = StatusCodes.Status500InternalServerError,
                        Type = GetClientErrorType(StatusCodes.Status500InternalServerError)
                    };
                });
            });

            return services;
        }

        internal static string GetClientErrorType(int status) =>
            status switch
            {
                StatusCodes.Status400BadRequest => "https://tools.ietf.org/html/rfc7231#section-6.5.1",
                StatusCodes.Status401Unauthorized => "https://tools.ietf.org/html/rfc7235#section-3.1",
                StatusCodes.Status403Forbidden => "https://tools.ietf.org/html/rfc7231#section-6.5.3",
                StatusCodes.Status404NotFound => "https://tools.ietf.org/html/rfc7231#section-6.5.4",
                StatusCodes.Status406NotAcceptable => "https://tools.ietf.org/html/rfc7231#section-6.5.6",
                StatusCodes.Status409Conflict => "https://tools.ietf.org/html/rfc7231#section-6.5.8",
                StatusCodes.Status413PayloadTooLarge => "https://tools.ietf.org/html/rfc7231#section-6.5.11",
                StatusCodes.Status415UnsupportedMediaType => "https://tools.ietf.org/html/rfc7231#section-6.5.13",
                StatusCodes.Status422UnprocessableEntity => "https://tools.ietf.org/html/rfc4918#section-11.2",
                StatusCodes.Status500InternalServerError => "https://tools.ietf.org/html/rfc2616#section-10.5.1",
                _ => "https://tools.ietf.org/html/rfc7231#section-6.5"
            };
    }
}
