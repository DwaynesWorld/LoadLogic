// <auto-generated />
using System;
using LoadLogic.Services.Ordering.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;

namespace Ordering.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(OrderingContext))]
    partial class OrderingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0-rc.2.20475.6");

            modelBuilder.Entity("LoadLogic.Services.Ordering.Domain.Aggregates.Orders.Leg", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn(101);

                    b.Property<Point>("DumpLocation")
                        .IsRequired()
                        .HasColumnType("geography");

                    b.Property<DateTime>("DumpTime")
                        .HasColumnType("datetime2");

                    b.Property<Point>("LoadLocation")
                        .IsRequired()
                        .HasColumnType("geography");

                    b.Property<DateTime>("LoadTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("RouteId")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .IsClustered();

                    b.HasIndex("RouteId");

                    b.ToTable("Legs");
                });

            modelBuilder.Entity("LoadLogic.Services.Ordering.Domain.Aggregates.Orders.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn(101);

                    b.Property<long?>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<string>("CustomerName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("bit");

                    b.Property<string>("JobDescription")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("JobEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("JobName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("JobStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderNo")
                        .HasColumnType("int");

                    b.Property<int?>("OrderStatus")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .IsClustered();

                    b.HasIndex("OrderNo")
                        .IsUnique();

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("LoadLogic.Services.Ordering.Domain.Aggregates.Orders.OrderItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn(101);

                    b.Property<int>("Activity")
                        .HasColumnType("int");

                    b.Property<decimal>("ChargeRate")
                        .HasColumnType("decimal(12,6)");

                    b.Property<string>("ChargeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("MaterialId")
                        .HasColumnType("bigint");

                    b.Property<string>("MaterialName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("MaterialQuantity")
                        .HasColumnType("float");

                    b.Property<string>("MaterialUnit")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<int>("TruckQuantity")
                        .HasColumnType("int");

                    b.Property<string>("TruckType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .IsClustered();

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("LoadLogic.Services.Ordering.Domain.Aggregates.Orders.Route", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn(101);

                    b.Property<long>("OrderItemId")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .IsClustered();

                    b.HasIndex("OrderItemId")
                        .IsUnique();

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("LoadLogic.Services.Ordering.Domain.Aggregates.Orders.Leg", b =>
                {
                    b.HasOne("LoadLogic.Services.Ordering.Domain.Aggregates.Orders.Route", "Route")
                        .WithMany("Legs")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("LoadLogic.Services.Address", "DumpAddress", b1 =>
                        {
                            b1.Property<long>("LegId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .UseIdentityColumn();

                            b1.Property<string>("AddressLine1")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("AddressLine2")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Building")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("CountryRegion")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("StateProvince")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("LegId");

                            b1.ToTable("Legs");

                            b1.WithOwner()
                                .HasForeignKey("LegId");
                        });

                    b.OwnsOne("LoadLogic.Services.Address", "LoadAddress", b1 =>
                        {
                            b1.Property<long>("LegId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .UseIdentityColumn();

                            b1.Property<string>("AddressLine1")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("AddressLine2")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Building")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("CountryRegion")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("StateProvince")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("LegId");

                            b1.ToTable("Legs");

                            b1.WithOwner()
                                .HasForeignKey("LegId");
                        });

                    b.Navigation("DumpAddress")
                        .IsRequired();

                    b.Navigation("LoadAddress")
                        .IsRequired();

                    b.Navigation("Route");
                });

            modelBuilder.Entity("LoadLogic.Services.Ordering.Domain.Aggregates.Orders.Order", b =>
                {
                    b.OwnsOne("LoadLogic.Services.Address", "JobAddress", b1 =>
                        {
                            b1.Property<long>("OrderId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .UseIdentityColumn();

                            b1.Property<string>("AddressLine1")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("AddressLine2")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Building")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("CountryRegion")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("StateProvince")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.OwnsOne("LoadLogic.Services.Email", "CustomerEmail", b1 =>
                        {
                            b1.Property<long>("OrderId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .UseIdentityColumn();

                            b1.Property<string>("Domain")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Identifier")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.OwnsOne("LoadLogic.Services.PhoneNumber", "CustomerPhone", b1 =>
                        {
                            b1.Property<long>("OrderId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .UseIdentityColumn();

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.Navigation("CustomerEmail");

                    b.Navigation("CustomerPhone");

                    b.Navigation("JobAddress");
                });

            modelBuilder.Entity("LoadLogic.Services.Ordering.Domain.Aggregates.Orders.OrderItem", b =>
                {
                    b.HasOne("LoadLogic.Services.Ordering.Domain.Aggregates.Orders.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("LoadLogic.Services.Ordering.Domain.Aggregates.Orders.Route", b =>
                {
                    b.HasOne("LoadLogic.Services.Ordering.Domain.Aggregates.Orders.OrderItem", "OrderItem")
                        .WithOne("Route")
                        .HasForeignKey("LoadLogic.Services.Ordering.Domain.Aggregates.Orders.Route", "OrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("LoadLogic.Services.Ordering.Domain.Aggregates.Orders.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("LoadLogic.Services.Ordering.Domain.Aggregates.Orders.OrderItem", b =>
                {
                    b.Navigation("Route")
                        .IsRequired();
                });

            modelBuilder.Entity("LoadLogic.Services.Ordering.Domain.Aggregates.Orders.Route", b =>
                {
                    b.Navigation("Legs");
                });
#pragma warning restore 612, 618
        }
    }
}
